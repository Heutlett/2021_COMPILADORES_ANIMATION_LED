## 1.   Define procedimiento alterno
	Procedure procY()
	{
##2. Define variable simples
	miVar1 = True;
##3.  Define simbolos especiales
	miVar2@2 = True;
	mivar_3 = True;
	mivar? = 3;
##4. Usa variable global
	If global == True
	{
##5. Ejecuta cuerpo dentro del IF
	newMat.Neg;
	}
##6. Llama rutina
	call miProc();
##7. Finaliza rutina
	};
##8. Inicia nueva rutina
	Procedure miProc()
	{
##9. Define variables Locales
	x = 5;
	y = 0;
##10. Define variables juntas mismo tipo
	##x, y = 20, 15;
##11.  Define variables juntas distinto tipo
	##a, b, c = True, False, 3;
	a = True;
	b = False;
	c = 3;
##12. Operaciones matematicas basicas
	x = 5 + 6;
	x = 10 - 15;
##13.  Operaciones matematicas
	x = 77 // 8;
	x = 5 % 2;
##14. Operaciones matematicas
	x = 5 * 5;
	##y = 2 ** 3;
##15. Operaciones usando precedencia
	##x = x + y * 10 / 4;
##16. Operaciones usando parentesis
	##x = x + ((y * 10) / 4);
##17. Operaciones usando parentesis
	##x = ((x + y) * 10) / 4;
	x = 10;
##18. Define lista vacia
	mi_var = [];
##19. Define lista con valores booleanos
	list1 = [True, True, False, False, False, False, True, True];
##20. Inicializa un valor de la lista
	##list1[0] = True;
##21. Inicializa los dos primeros valores de la lista
	##list1[0:1] = True;
##22. Crea listas usando RANGE
	list2 = list(range(5, True));
##23. Agrega un nuevo elemento a la lista
	list2.insert(2,False);
##24. Usa la funcion NEG
	list2[1].Neg;
##25. Usa la funcion TRUE	
	list2[1].T;
##26. Usa la funcion TRUE compuesta
	##list2[0:1].T;
##27. Usa la funcion FALSE
	list2[1].F;
##28. Usa la funcion FALSE compuesta
	##list2[0:1].F;
##29.  Enciende el Blink
	Blink( 0,5,5, "Seg", True);
##30.  Apaga el Blink
	Blink( 0,5,5, "Seg", False);
##31. Ejecuta un Delay
	Delay( 5, "Mil" );
##32. Ejecuta un Printled simple
	PrintLed(1,1, True);
##33. Ejecuta un Printled de lista
	listaX = [True, True, False, False, False, False, True, False];
	PrintLedX("F", 2, listaX);
##34. Ejecuta un Printled de una matriz
	miMatriz = [[True , True , True, True, False, True, False, True ],
	[True , True , True, True, True, True, True, True ],
	[False , False, False, True, True, True, True, True]];
	PrintLedX("M", 0, miMatriz);
##35. Ejecuta NEG sobre listas
	lista1 = [True, False, True, False, True, False, True, False, True, False];
	lista1[1].Neg;
	lista1[3].Neg;
	lista1[5].Neg;
	lista1[7].Neg;
	lista1[9].Neg;
##36. Usa FOR para Negar una lista
	for var1 in x Step 2
	{
	lista1[var1].Neg;
	}
##37. Usa FOR para Negar una lista usando valores complejos
	##for var1 in milista[1:3]
	##{
	##lista1[var1].Neg;
	##}
##38. Usa FOR con valor constante
	for var1 in 10
	{
	x[var1].Neg;
	}
##39. Actualiza un valor de una matriz
	mivariable=[[True,False,True],[True, True, True],[False,False,True]];
	##mivariable[0] = True;    ##Actualiza primer fila
##40. Actualiza primer elemento de una matriz
	##mivariable[1][1] = True;     ## Actualiza primer elemento
##41.  Actualiza primer elemento de una matriz
	##mivariable[1,1] = True;     ## Actualiza primer elemento
##42.  Actualiza primer columna de una matriz
	##mivariable[:,1] = True;     ## Actualiza primer columna
##43. Devuelve numero de filas
	##a = matriz1.shapeF;     ## Devuelve numero de filas
##44. Devuelve numero de columnas
	##b=matriz1.shapeC;    ##Devuelve numero de columnas
##45. Inserta en una matriz
	miNMatriz=[[True,False,True],[True, True, True],[False,False,True]];
	miNMatriz.insert([True, False, True], 0);
##46. Inserta en una matriz
	miNMatriz.insert([True, True , True, True], 1);
##47. Inserta en una matriz usando un indice	
	miNMatriz.insert([False, False, False, False], 0, 0);
##48. Elimina un valor de la matriz
	miNMatriz.delete(0,0);    ## Elimina valor
##49. Obtiene el numero de filas y columnas de la matriz
	filas = miNMatriz.shapeF;
	columnas = miNMatriz.shapeC;
##50.  Usando doble FOR niega todos los valores de  una matriz
	##for i_fila in filas
	##{
	##for i_columna in columnas
	##{
	##miNMatriz[i_fila, i_columna].Neg;
	##}
	##}
##51. Actualiza una matriz
	miNMatriz2=[[True,False,True],[True, True, True],[False,False,True]];
	##miNMatriz[1][1] = True;
##52.  Actualiza una matriz usando otra matriz
	##miNMatriz[1][1] = miNMatriz2[2][2];
##53.  Usando un IF
	otra1 = 5;
	If otra1 == 5
	{
	otra1 = 6;
	}
##54.  Usa una matriz dentro de un IF
	##If miNMatriz[1][1]  == True
	##{
	##miNMatriz[1][1].Neg;
	##}
##55.  Usa una columna de una matriz dentro del IF
	##If miNMatriz[:, 1] == True
	##{
	##miNMatriz[:, 1] .Neg;
	##}
##56. Finaliza el procedimiento
	};   ## Finaliza procedimiento
##57.  Procedimiento Principal
	Procedure Main()
	{
##58.  Define una variable global
	   newMat = [[True , True , True, True, False, True, False, True ],
	     [True , True , True, True, True, True, True, True ],
	     [False , False, False, True, True, True, True, True],
	     [True , True , True, True, True, True, True, True ],
	     [True , True , True, True, True, True, True, True ],
	     [True , True , True, True, True, True, True, True ],
	     [True , True , True, True, True, True, True, True ],
	     [False , False, False, True, True, True, True, True]];
	  global = True;
##59.  Llama procedimientos desde procedimiento inicial
	  call procY();
##60.  Finaliza programa
	};   ## Finaliza procedimiento